{"version":3,"sources":["store.js","components/ToDo.js","routes/Home.js","routes/Detail.js","components/App.js","index.js"],"names":["toDos","createSlice","name","initialState","reducers","add","state","action","push","text","payload","id","Date","now","remove","filter","toDo","store","configureStore","reducer","actions","connect","dispatch","ownProps","onBtnClick","to","onClick","addToDo","useState","setText","onSubmit","e","preventDefault","type","value","onChange","target","map","key","match","params","find","parseInt","App","path","exact","component","Home","Detail","ReactDOM","render","document","getElementById"],"mappings":"2OAqDMA,EAAQC,YAAY,CACxBC,KAAM,eACNC,aAAc,GACdC,SAAU,CACRC,IAAK,SAACC,EAAOC,GACXD,EAAME,KAAK,CAAEC,KAAMF,EAAOG,QAASC,GAAIC,KAAKC,SAE9CC,OAAQ,SAACR,EAAOC,GAAR,OACND,EAAMS,QAAO,SAACC,GAAD,OAAUA,EAAKL,KAAOJ,EAAOG,eAM1CO,EAAQC,YAAe,CAAEC,QAASnB,EAAMmB,U,EAOfnB,EAAMoB,QAAtBf,E,EAAAA,IAAKS,E,EAAAA,OAELG,ICtDAI,kBAAQ,MAPvB,SAA4BC,EAAUC,GACpC,MAAO,CAELC,WAAY,kBAAMF,EAASR,EAAOS,EAASZ,SAIhCU,EAhBf,YAAyC,IAAzBZ,EAAwB,EAAxBA,KAAMe,EAAkB,EAAlBA,WAAYb,EAAM,EAANA,GAChC,OACE,4BACE,kBAAC,IAAD,CAAMc,GAAE,WAAMd,KACbF,EAFH,IAES,4BAAQiB,QAASF,GAAjB,cCqCEH,mBAdf,SAAyBf,GAGvB,MAAO,CAAEN,MAAOM,MAGlB,SAA4BgB,GAC1B,MAAO,CAELK,QAAS,SAAClB,GAAD,OAAUa,EAASjB,EAAII,QAKrBY,EAzCf,YAAmC,IAAnBrB,EAAkB,EAAlBA,MAAO2B,EAAW,EAAXA,QAAW,EACRC,mBAAS,IADD,mBACzBnB,EADyB,KACnBoB,EADmB,KAUhC,OACE,oCACE,qCACA,0BAAMC,SARV,SAAkBC,GAChBA,EAAEC,iBACFL,EAAQlB,GACRoB,EAAQ,MAMJ,2BAAOI,KAAK,OAAOC,MAAOzB,EAAM0B,SAZtC,SAAkBJ,GAChBF,EAAQE,EAAEK,OAAOF,UAYb,wCAEF,4BACGlC,EAAMqC,KAAI,SAACrB,GAAD,OACT,kBAAC,EAAD,iBAAUA,EAAV,CAAgBsB,IAAKtB,EAAKL,cCHrBU,mBAVf,SAAyBf,EAAOiB,GAAU,IAI1BZ,EAEVY,EAHFgB,MACEC,OAAU7B,GAGd,MAAO,CAAEK,KAAMV,EAAMmC,MAAK,SAACzB,GAAD,OAAUA,EAAKL,KAAO+B,SAAS/B,SAG5CU,EAnBf,YAA2B,IAATL,EAAQ,EAARA,KAChB,OACE,oCACE,mCAAKA,QAAL,IAAKA,OAAL,EAAKA,EAAMP,MACX,kDAAiBO,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAML,QCOdgC,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,OAAOE,UAAWE,MCHpCC,IAASC,OACP,kBAAC,IAAD,CAAUjC,MAAOA,GACf,kBAAC,EAAD,OAEFkC,SAASC,eAAe,W","file":"static/js/main.7451ed35.chunk.js","sourcesContent":["//import { createStore } from \"redux\";\r\nimport {\r\n  createAction,\r\n  createReducer,\r\n  configureStore,\r\n  createSlice,\r\n} from \"@reduxjs/toolkit\"; //더 적은 양의 redux 코드를 짤 수 있도록 해줌\r\n\r\n//const ADD = \"ADD\";\r\n//const DELETE = \"DELETE\";\r\n\r\n// const addToDo = (text) => {\r\n//   return {\r\n//     type: ADD,\r\n//     text,\r\n//   };\r\n// };\r\n\r\n// const deleteToDo = (id) => {\r\n//   return {\r\n//     type: DELETE,\r\n//     id: parseInt(id),\r\n//   };\r\n// };\r\n\r\n// const addToDo = createAction(\"ADD\"); //type, payload(보내고 싶은 정보)를 가짐\r\n// const deleteToDo = createAction(\"DELETE\");\r\n\r\n// const reducer = (state = [], action) => {\r\n//   switch (action.type) {\r\n//     case addToDo.type:\r\n//       return [...state, { text: action.payload, id: Date.now() }];\r\n//     case deleteToDo.type:\r\n//       return state.filter((toDo) => toDo.id !== action.payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// // 툴킷으로 작업할 때는 state를 (새로운 state를 만드는 대신) mutate할 수 있음\r\n// // createReducer 옵션1: 새로운 state 리턴, 옵션2: state mutate\r\n// const reducer = createReducer([], {\r\n//   [addToDo]: (state, action) => {\r\n//     state.push({ text: action.payload, id: Date.now() });\r\n//     //push는 아무것도 return하지 않음\r\n//   },\r\n//   [deleteToDo]: (state, action) =>\r\n//     state.filter((toDo) => toDo.id !== action.payload),\r\n//   //뭔가를 return할 때는 꼭 새로운 state여야 함.\r\n//   //filter는 state를 mutate하는게 아닌, 새로운 array 리턴\r\n// });\r\n\r\n//reducer와 actions 생성\r\nconst toDos = createSlice({\r\n  name: \"toDosReducer\",\r\n  initialState: [],\r\n  reducers: {\r\n    add: (state, action) => {\r\n      state.push({ text: action.payload, id: Date.now() });\r\n    },\r\n    remove: (state, action) =>\r\n      state.filter((toDo) => toDo.id !== action.payload),\r\n  },\r\n});\r\n\r\n//const store = createStore(reducer);\r\n\r\nconst store = configureStore({ reducer: toDos.reducer });\r\n\r\n// export const actionCreators = {\r\n//   addToDo,\r\n//   deleteToDo,\r\n// };\r\n\r\nexport const { add, remove } = toDos.actions;\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n//import { actionCreators } from \"../store\";\r\nimport { remove } from \"../store\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction ToDo({ text, onBtnClick, id }) {\r\n  return (\r\n    <li>\r\n      <Link to={`/${id}`}></Link>\r\n      {text} <button onClick={onBtnClick}>Delete</button>\r\n    </li>\r\n  );\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch, ownProps) {\r\n  return {\r\n    // onBtnClick: () => dispatch(actionCreators.deleteToDo(ownProps.id))\r\n    onBtnClick: () => dispatch(remove(ownProps.id)),\r\n  };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(ToDo);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n//import { actionCreators } from \"../store\";\r\nimport { add } from \"../store\";\r\nimport ToDo from \"../components/ToDo\";\r\n\r\nfunction Home({ toDos, addToDo }) {\r\n  const [text, setText] = useState(\"\");\r\n  function onChange(e) {\r\n    setText(e.target.value);\r\n  }\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    addToDo(text);\r\n    setText(\"\");\r\n  }\r\n  return (\r\n    <>\r\n      <h1>To Do</h1>\r\n      <form onSubmit={onSubmit}>\r\n        <input type=\"text\" value={text} onChange={onChange} />\r\n        <button>Add</button>\r\n      </form>\r\n      <ul>\r\n        {toDos.map((toDo) => (\r\n          <ToDo {...toDo} key={toDo.id} />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\n// mapStateToProps(state, props): redux state로 부터 component에 prop으로써 전달\r\nfunction mapStateToProps(state) {\r\n  // state is from Redux store\r\n  // return 값: component의 props에 전달해주고 싶은 값\r\n  return { toDos: state };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    //addToDo: (text) => dispatch(actionCreators.addToDo(text)),\r\n    addToDo: (text) => dispatch(add(text)),\r\n  };\r\n}\r\n\r\n// connect is from react-redux, component를 store에 연결해줌\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction Detail({ toDo }) {\r\n  return (\r\n    <>\r\n      <h1>{toDo?.text}</h1>\r\n      <h5>Created at: {toDo?.id}</h5>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  // const id = ownProps.match.params.id;\r\n  const {\r\n    match: {\r\n      params: { id },\r\n    },\r\n  } = ownProps;\r\n  return { toDo: state.find((toDo) => toDo.id === parseInt(id)) };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Detail);\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\nimport Home from \"../routes/Home\";\r\nimport Detail from \"../routes/Detail\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Route path=\"/\" exact component={Home}></Route>\r\n      <Route path=\"/:id\" component={Detail}></Route>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}